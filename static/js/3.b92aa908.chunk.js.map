{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCanceled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zip","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","e","preventDefault","formData","formElement","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputId","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","orderActions","withErrorHandler","axios","Checkout","checkoutCanceledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.b92aa908.chunk.js","sourcesContent":["import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst CheckoutSummary = (props) => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope you enjoy!</h1>\n      <div style={{ width: '100%', margin: 'auto' }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button //\n        btnType='Danger'\n        clicked={props.checkoutCanceled}>\n        Cancel\n      </Button>\n      <Button //\n        btnType='Success'\n        clicked={props.checkoutContinued}>\n        Continue\n      </Button>\n    </div>\n  );\n};\n\nexport default CheckoutSummary;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as orderActions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utilities';\n\nexport class ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Name',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Street',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zip: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'ZIP CODE',\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5,\n          isNumeric: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your E-mail',\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            { value: 'fastest', displayValue: 'Fastest' },\n            { value: 'cheapest', displayValue: 'Cheapest' },\n          ],\n        },\n        value: 'Fastest',\n        validation: {},\n        valid: true,\n      },\n    },\n    formIsValid: false,\n  };\n\n  orderHandler = (e) => {\n    e.preventDefault();\n\n    const formData = {};\n    for (let formElement in this.state.orderForm) {\n      formData[formElement] = this.state.orderForm[formElement].value;\n    }\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId,\n    };\n\n    this.props.onOrderBurger(order, this.props.token);\n  };\n\n  inputChangedHandler = (e, inputId) => {\n    // need to deep clone nested objects to access there data.\n    const updatedFormElement = updateObject(this.state.orderForm[inputId], {\n      value: e.target.value,\n      valid: checkValidity(\n        e.target.value,\n        this.state.orderForm[inputId].validation\n      ),\n      touched: true,\n    });\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputId]: updatedFormElement,\n    });\n\n    let formIsValid = true;\n    for (let inputId in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputId].valid && formIsValid;\n    }\n    // update state with the new data from the form input. two-way binded now.\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map((formElement) => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={formElement.config.touched && !formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            changed={(e) => this.inputChangedHandler(e, formElement.id)}\n          />\n        ))}\n        <Button btnType='Success' disabled={!this.state.formIsValid}>\n          Order!\n        </Button>\n      </form>\n    );\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onOrderBurger: (orderData, token) =>\n      dispatch(orderActions.purchaseBurger(orderData, token)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nexport class Checkout extends Component {\n  checkoutCanceledHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace('/checkout/contact-data');\n  };\n\n  render() {\n    let summary = <Redirect to='/' />;\n\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to='/' />\n      ) : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            checkoutCanceled={this.checkoutCanceledHandler}\n            checkoutContinued={this.checkoutContinuedHandler}\n          />\n          <Route\n            path={this.props.match.path + '/contact-data'}\n            component={ContactData}\n          />\n        </div>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased,\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst Input = (props) => {\n  let inputElement = null;\n\n  const inputClasses = [classes.InputElement];\n  if (props.invalid && props.shouldValidate) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case 'input':\n      inputElement = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case 'textarea':\n      inputElement = (\n        <textarea\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case 'select':\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}>\n          {props.elementConfig.options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};"],"sourceRoot":""}