{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","e","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","Input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Label","label"],"mappings":"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","file":"static/js/4.a23aeaa2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI//Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utilities';\n\nexport class Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your Email',\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Your Password',\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 7,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignUp: true,\n  };\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (e, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: e.target.value,\n        valid: checkValidity(\n          e.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      }),\n    });\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignUp\n    );\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState((prevState) => {\n      return { isSignUp: !prevState.isSignUp };\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n\n    let form = formElementsArray.map((formElement) => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={formElement.config.touched && !formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        changed={(e) => this.inputChangedHandler(e, formElement.id)}\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>;\n    }\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType='Success'>Submit</Button>\n        </form>\n        <Button clicked={this.switchAuthModeHandler} btnType='Danger'>\n          Switch to {this.state.isSignUp ? 'Sign In' : 'Sign Up'}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignUp) =>\n      dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst Input = (props) => {\n  let inputElement = null;\n\n  const inputClasses = [classes.InputElement];\n  if (props.invalid && props.shouldValidate) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case 'input':\n      inputElement = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case 'textarea':\n      inputElement = (\n        <textarea\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case 'select':\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}>\n          {props.elementConfig.options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}